// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShop.Data;

#nullable disable

namespace WebShop.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240816124332_Seed_product")]
    partial class Seed_product
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebShop.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SwedishName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebShop.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "desktop-inspiron-3030-mt.jpg",
                            Name = "Desktop-inspiron-3030-mt"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "desktop-inspiron-3910.jpg",
                            Name = "Desktop-inspiron-3910"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "HP_Pavilion_Gaming_Desktop_TG01.jpg",
                            Name = "HP_Pavilion_Gaming_Desktop_TG01"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "HP_Pavilion_TP01_3042.jpg",
                            Name = "HP_Pavilion_TP01_3042"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "dell-vostro-3520-core-i5-16gb-512gb-156.jpg",
                            Name = "Dell-vostro-3520-core-i5-16gb-512gb-156"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "hp_14_ep0875no.jpg",
                            Name = "HP_14_ep0875no"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "hp-255-g8-ryzen-5-8gb-256gb-156.jpg",
                            Name = "HP-255-g8-ryzen-5-8gb-256gb-156"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "lenovo-thinkpad-l13-g3-ryzen-3-8gb-256gb-133.jpg",
                            Name = "Lenovo-thinkpad-l13-g3-ryzen-3-8gb-256gb-133"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "Macbook_Air_Retina_A2179_8gb_256gb.jpg",
                            Name = "Macbook_Air_Retina_A2179_8gb_256gb"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "msi-modern-14-c7m-ryzen-7-16gb-512gb-14.jpg",
                            Name = "Msi-modern-14-c7m-ryzen-7-16gb-512gb-14"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "samsung-galaxy-book3-pro-core-i7-16gb-512gb-14.jpg",
                            Name = "Samsung-galaxy-book3-pro-core-i7-16gb-512gb-14"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "samsung-tq55q70c-55-4k-qled-smart-tv-2023.jpg",
                            Name = "Samsung-tq55q70c-55-4k-qled-smart-tv-2023"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "samsung-tu65cu7105k-1651-cm-65-4k-ultra-hd-smart-tv.jpg",
                            Name = "Samsung-tu65cu7105k-1651-cm-65-4k-ultra-hd-smart-tv"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "Apple _AirPods_Pro_2nd_gen_ with MagSafe Charging_Case_(USB‑C).jpg",
                            Name = "Apple _AirPods_Pro_2nd_gen_ with MagSafe Charging_Case_(USB‑C)"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 4,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "iphone-6-head-phone_rs130.jpg",
                            Name = "Iphone-6-head-phone_rs130"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "J917.jpg",
                            Name = "J917"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "vinnfier_elite_5BT_black.jpg",
                            Name = "Vinnfier_elite_5BT_black"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "vinnfier_elite_5BT_white.jpg",
                            Name = "Vinnfier_elite_5BT_white"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 5,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "HP_Desktop_320K_keybord.jpg",
                            Name = "HP_Desktop_320K_keybord"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 5,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "samsung-hw-b660-soundbar.jpg",
                            Name = "Samsung-hw-b660-soundbar.jpg"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "voxicon-office-mus-m30wlb-rf-wireless.jpg",
                            Name = "Voxicon-office-mus-m30wlb-rf-wireless"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            Description = "Lorem Ipsum dolet...",
                            ImageUrl = "zyxel-nebula-fwa505-indoor-5g-router.jpg",
                            Name = "Zyxel-nebula-fwa505-indoor-5g-router"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebShop.Models.Product", b =>
                {
                    b.HasOne("WebShop.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebShop.Models.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
